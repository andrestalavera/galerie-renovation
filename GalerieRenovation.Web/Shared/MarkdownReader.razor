@using Markdig
@using Markdig.Extensions.AutoLinks

@inject IHttpClientFactory httpClientFactory
@inject ILogger<MarkdownReader> logger

@if (IsLoading)
{
    <Loading />
}
else
{
    @PageContent
}

@code {
    [Parameter]
    public string? File { get; set; }

    public MarkupString PageContent { get; set; }
    public bool IsLoading { get; set; } = true;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrWhiteSpace(File))
        {
            Console.WriteLine($"{File} (file name) is null or whitespace");
        }
        else
        {
            HttpClient httpClient = httpClientFactory.CreateClient("data");
            string content = await httpClient.GetStringAsync($"data/{File}.md");

            Console.WriteLine($"{File} content: {content}");

            if (string.IsNullOrWhiteSpace(content))
            {
                Console.WriteLine($"{File} content is empty");
            }
            else
            {
                MarkdownPipeline pipeline = new MarkdownPipelineBuilder()
                    .UseAdvancedExtensions()
                    .UseBootstrap()
                    .UseCustomContainers()
                    .UseAutoLinks(new AutoLinkOptions
                        {
                            OpenInNewWindow = true
                        })
                    .UseGridTables()
                    .UsePipeTables()
                    .UseMediaLinks()
                    .Build();
                string html = Markdown.ToHtml(content, pipeline);
                Console.WriteLine("html:" + html);
                PageContent = new(html);
            }
        }
        IsLoading = false;
        Console.WriteLine("IsLoading: " + IsLoading);
    }
}